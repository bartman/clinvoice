#autoload -U
#vim: set ft=zsh 
#
# This function takes as arguments a template file name and an output
# file name.  It processes the template to generate the result.

local input=$1
local output=$2
local escape_type=$3

RE_MATCH_PCRE=1
zmodload zsh/pcre

local mode=normal
local -a script
local cli_cmd=
local -A vars

function process_line() {
        process_$mode $1
}

function process_normal() {
        local line="$1"

        if [[ $line =~ "<cli([^>]*)>" ]] ; then
                local arg="${match[1]}"
                local pre="${line%<cli$arg>*}"
                local post="${line#*<cli$arg>}"
                cli_cmd=${arg# }

                printf >>$output "%s" "$pre"

                if [[ -z "$cli_cmd" ]] ; then
                        mode=script
                        process_script "$post"
                else
                        script=()
                        mode=accumulate
                        process_accumulate "$post"
                fi
        else
                printf >>$output "%s\n" "$line"
        fi
}

function process_accumulate() {
        local line="$1"

        if [[ $line =~ "</cli>" ]] ; then
                local pre="${line%</cli>*}"
                local post="${line#*</cli>}"

                script+=( "$pre" )

                run_accumulated "$cli_cmd"

                mode=normal
                process_normal "$post"
        else
                script+=( "$line" )
        fi
}

function process_script() {
        local line="$1"

        if [[ $line =~ "</cli>" ]] ; then
                local pre=${line%</cli>*}
                local post=${line#*</cli>}

                run_script $pre

                mode=normal
                process_normal "$post"
        else
                run_script $line
        fi
}

function run_accumulated() {
        local cmd="$1"
        case "$cmd" in
            for_each_day)
                local -F rate=${vars[hourlyrate]}
                vars[number]=0
                for day in ${(o)${(k)dayhours}} ; do
                        # setup the loop variables
                        let "vars[number] = ${vars[number]} + 1"
                        vars[date]=$day
                        vars[text]=${${daytext[$day]}///; }

                        local -F hours=${dayhours[$day]}
                        vars[dayhours]=$hours
                        let "cost = $hours * $rate"
                        vars[daycost]=$cost

                        # now run the accumulated script
                        for line in $script ; do
                                run_script $line
                        done
                done
                ;;
            for_each_note)
                vars[number]=0
                for (( idx=1 ; idx <= ${#notes} ; idx++ )) ; do
                        # setup the loop variables
                        let "vars[number] = ${vars[number]} + 1"
                        vars[text]="${notes[$idx]}"

                        # now run the accumulated script
                        for line in $script ; do
                                run_script $line
                        done
                done
                ;;
            for_each_discount)
                vars[number]=0
                for date in ${(o)${(k)discount_ttl_amt}} ; do
                        amt=( ${(s::Q)discount_ttl_amt[$date]} )
                        txt=( ${(s::Q)discount_ttl_txt[$date]} )
                        for (( idx=1 ; idx <= ${#amt} ; idx++ )) ; do
                                vars[text]="${txt[$idx]}"
                                vars[cost]="${amt[$idx]}"
                                for line in $script ; do
                                        run_script "$line"
                                done
                        done
                done
                ;;
            *)
                die "unknon <cli $cmd> expression"
                ;;
        esac
}

function run_script() {
        local line="$1"
        local -a argv
        argv=( ${(Q)${(z)line}} )
        [[ $#argv = 0 ]] && return

        case ${argv[1]} in 
            vars_printf)
                # vars_printf <format> <vars>...
                # ... for each var, look it up, and print everything
                for (( n=3; n<=$#argv; n++ )) ; do
                        local var=${argv[$n]}
                        local max=${var#*/}
                        var=${var%/*}
                        local val=${vars[$var]}
                        [[ -n "$val" ]] || die "undefined template variable '$var'"
                        [[ "$max" != "$var" ]] && val="${val[1,$max]}"
                        argv[$n]="$($escape_word $val)"
                done
                printf >>$output ${argv[2,-1]}
                ;;
            ifdef)
                # ifdef <var> <command>
                local var=${argv[2]}
                [[ "$line" =~ "^\s*ifdef\s+$var\s+([^ ].+)$" ]] \
                || die "template command parsing error on line...\n$line"
                run_script "${match[1]}"
                ;;
            vars_print_date)
                # vars_print_date <format> <var>
                # ... uses date formatting to print a date given a variable name
                local fmt=${argv[2]}
                local var=${argv[3]}
                local val=${vars[$var]}
                [[ -n "$val" ]] || die "undefined template variable '$var'"
                local tmp="$(strftime $fmt $val)"
                local tmp="$($escape_word $tmp)"
                printf >>$output "%s" "$tmp"
                ;;
            conf_ifdef_printf)
                # conf_ifdef_printf <config-name> <format>
                # ... check if <config-name> exists, and print if it does
                local var=${argv[2]}
                local val=${conf[$var]}
                local val="$($escape_word $val)"
                [[ -n "${conf[$var]}" ]] && printf >>$output ${argv[3]} $val
                ;;
            *)
                die "unknown template function '${argv[1]}'"
                ;;
        esac
}

# initialize some variables
vars[lastdate]=$(strftime -r "%Y.%m.%d" ${${(o)${(k)dayhours}}[-1]})
vars[sequence]=${gen_seq:-1}
vars[today]=$(date +%s)
vars[totalhours]=
vars[hourlyrate]=${conf[contract.hourly-rate]}

local tax=${conf[contract.tax]}
[[ $tax =~ "^([^ ]+)\s+([0-9.]+)%\s*$" ]] || die "invalid contract.tax format '$tax' (ex: VAT 5%)"
vars[taxname]=${match[1]}
vars[taxpercent]=${match[2]}
vars[taxid]=${conf[contract.taxid]}

for day in ${(k)dayhours} ; do
        local -F hours=${dayhours[$day]}
        vars[daycost]=$cost

        local -F tmp=${vars[totalhours]:-0}
        let "tmp = $tmp + $hours"
        vars[totalhours]=$tmp

done

local -F subtotalcost=0
local -F hours=${vars[totalhours]:-0}
local -F rate=${vars[hourlyrate]}
let "subtotalcost = $hours * $rate"
vars[subtotalcost]=$subtotalcost

local -F taxcost=${vars[taxpercent]}
let "taxcost = ( $taxcost * $subtotalcost ) / 100"
vars[taxcost]=$taxcost

local -F totaldiscount=0
if [[ ${#discount_ttl_amt} -gt 0 ]] ; then
        for date in ${(o)${(k)discount_ttl_amt}} ; do
                amt=( ${(s::Q)discount_ttl_amt[$date]} )
                for (( idx=1 ; idx <= ${#amt} ; idx++ )) ; do
                        let "totaldiscount += ${amt[$idx]}"
                done
        done
fi
vars[totaldiscount]=$totaldiscount

local -F totalcost
let "totalcost = $subtotalcost + $taxcost - $totaldiscount"
vars[totalcost]=$totalcost

# setup escaping
local escape_word=escape_noop
if [[ -n "$escape" ]] ; then
        case $escape in
            latex)
                escape_word=escape_$escape
                ;;
            *)
                die "don't know how to escape '$escape'"
                ;;
        esac
fi

function escape_noop() {
        printf "%s" "$1"
}

function escape_latex() {
        local txt="$1"

        txt=${txt//\\/\\\\}
        txt=${txt//\#/\\\#}
        txt=${txt//_/\\_}
        txt=${txt//&/\\&}
        txt=${txt//\%/\\%}
        txt=${txt//\$/\\$}
        txt=${txt//^/\\^\{\}}
        txt=${txt//\~/\\~\{\}}

        printf "%s" "$txt"
}


# process...
while IFS= read -r line ; do
        process_line $line
done < $input

