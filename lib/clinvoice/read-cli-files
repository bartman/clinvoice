#autoload -U
#vim: set ft=zsh 
#
# Read files passed in as arguments, read out all entries matching $datespec.
# Populate the following associative arrays:
#     ${daytext[YYYY.MM.DD]}
#         this array contains multiple lines per entry, the text can be split:
#         lines=( ${(s::Q)daytext[$day]} )
#     ${dayhours[YYYY.MM.DD]}
#         sum of all time spent that day
#     ${monthhours[YYYY.MM]}
#         sum of all time spent that month
#     ${yearhours[YYYY]}
#         sum of all time spent that year

RE_MATCH_PCRE=1
zmodload zsh/pcre
zmodload zsh/datetime

function test_day_against_implied_datespec() {
        local file=$1
        local line_no=$2
        local datespec=$3
        local day=$4
        [[ -z "$datespec" ]] && return
        [[ "$day" =~ "^$datespec" ]] && return
        warn "$file:$line_no: implies $datespec, but contains $day"
}

function test_day_against_datespec() {
        local day=$1
        for spec in $datespec ; do
                eval "case '$day' in
                    $spec)
                        return 1
                        ;;
                esac"
        done
        return 0
}

function calc_duration() {
        local time=$1

        if [[ $time =~ "^\s*([0-9.]+)h?\s*$" ]] ; then
                echo ${match[1]}
                return 0

        elif [[ $time =~ "^\s*([0-9.]+)m?\s*$" ]] ; then
                die "don't support duration expressed in minutes"

        elif [[ $time =~ "^\s*([0-9]{1,2})\s*-\s*([0-9]{1,2})\s*$" ]] ; then

                let "t1 = ${match[1]}"
                let "t2 = ${match[2]}"
                let "duration = $t2 - $t1"

                echo $duration
                return 0

        elif [[ $time =~ "^\s*([0-9]{1,2}):([0-5][0-9])\s*-\s*([0-9]{1,2}):([0-5][0-9])\s*$" ]] ; then

                let "t1 = (${match[1]} * 60) + ${match[2]}"
                let "t2 = (${match[3]} * 60) + ${match[4]}"

                let "delta = $t2 - $t1"

                let -F "hrs = $delta / 60"
                let -F "min = $delta % 60"

                let "duration = $hrs + ( $min / 60 )"

                echo $duration
                return 0
        fi

        die "unrecognized time duration '$time'"
}

function update_time_entries() {
        local mode=$1 day=$2 time=$3 text=$4
        local dur=$(calc_duration $time)

        [[ $mode = date ]] || die "unsupported mode $mode"

        # entries are separated by ^C character
        daytext[$day]="${daytext[$day]}$text"

        local -F tmp=${dayhours[$day]:-0}
        let "tmp = $tmp + $dur"
        dayhours[$day]=$tmp

        local month=${day%.*}

        local -F tmp=${monthhours[$month]:-0}
        let "tmp = $tmp + $dur"
        monthhours[$month]=$tmp

        local year=${day%.*}

        local -F tmp=${yearhours[$year]:-0}
        let "tmp = $tmp + $dur"
        yearhours[$year]=$tmp
}

function update_discount_entries() {
        local mode=$1 date=$2 amount=$3 text=$4

        amount=${amount#\$}

        case $mode in
        total-discount) ;;
        *) die "unsupported discount mode $mode" ;;
        esac

        discount_ttl_amt[$date]="${discount_ttl_amt[$day]}$amount"
        discount_ttl_txt[$date]="${discount_ttl_txt[$day]}$text"
}

function update_note_entries() {
        local mode=$1 day=$2 text=$3

        case $mode in
        notes) ;;
        *) die "unsupported note mode $mode" ;;
        esac

        local idx=$(( ${#notes} + 1 ))
        notes[$idx]="$text"
}

function str_to_datespec() {
        local input="$1"
        if [[ "$input" =~ "^(20[0-9]{2})[./\s-]*([01][0-9])[./\s-]*([0-3][0-9])" ]] ; then
                echo "${match[1]}.${match[2]}.${match[3]}"
        elif [[ "$input" =~ "^(20[0-9]{2})[./\s-]*([01][0-9])" ]] ; then
                echo "${match[1]}.${match[2]}"
        elif [[ "$input" =~ "^(20[0-9]{2})" ]] ; then
                echo "${match[1]}"
        fi
}

function read_data_file() {
        local file="$1"
        local day=
        local matching=0
        local mode=
        local implied_datespec=$( str_to_datespec "$file" )
        local line_no=0
        while read line ; do
                let "line_no ++"
                #echo "# $line"
                if [[ "$line" =~ "^\s*(20[0-9]{2})[./\s-]*([01][0-9])[./\s-]*([0-3][0-9])\s*$" ]] ; then
                        day="${match[1]}.${match[2]}.${match[3]}"
                        test_day_against_implied_datespec "$file" "$line_no" "$implied_datespec" "$day"
                        test_day_against_datespec $day
                        matching=$?
                        mode=date

                elif [[ "$line" =~ "^\s*(20[0-9]{2})[./\s-]*([01][0-9])\s+([a-z].*)\s*$" ]] ; then
                        day="${match[1]}.${match[2]}."
                        test_day_against_datespec $day
                        matching=$?
                        mode="${match[3]}"
                        case "$mode" in
                            total-discount) ;;
                            subtotal-discount) ;;
                            notes) ;;
                            *)
                                die "don't know how to handle this line in $file:\n$line"
                                ;;
                        esac

                elif [[ "$mode" = "date" ]] && [[ "$line" =~ "^\s*([^=]+)\s*=\s*(.+)\s*$" ]] ; then
                        [[ $matching -eq 1 ]] && update_time_entries $mode $day ${match[1]} ${match[2]}

                elif [[ "$mode" =~ "^.*-discount$" ]] && [[ "$line" =~ "^\s*([^= ]+)\s*=\s*(.+)\s*$" ]] ; then
                        [[ $matching -eq 1 ]] && update_discount_entries $mode $day ${match[1]} ${match[2]}

                elif [[ "$mode" = "notes" && "$line" =~ "^\s*(.+)\s*$" ]] ; then
                        [[ $matching -eq 1 ]] && update_note_entries $mode $day ${match[1]}

                elif [[ "$line" =~ "^\s*$" ]] ; then
                        # nothing

                else
                        die "don't know how to handle this line in $file:\n$line"

                fi
        done < "$file"
}

declare -g -A daytext
declare -g -A dayhours
declare -g -A monthhours
declare -g -A yearhours
declare -g -A discount_ttl_amt
declare -g -A discount_ttl_txt

for file in $* ; do
        [[ "$file" =~ "^\./(.*)$" ]] && file="${match[1]}"
        [[ -r "$file" ]] || die "unable to read file '$file'"
        read_data_file "$file"
done

