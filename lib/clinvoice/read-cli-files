#autoload -U
#vim: set ft=zsh 
#
# Read files passed in as arguments, read out all entries matching $datespec.
# Populate the following associative arrays:
#     ${daytext[YYYY.MM.DD]}
#         this array contains multiple lines per entry, the text can be split:
#         lines=( ${(s::Q)daytext[$day]} )
#     ${dayhours[YYYY.MM.DD]}
#         sum of all time spent that day
#     ${monthhours[YYYY.MM]}
#         sum of all time spent that month
#     ${yearhours[YYYY]}
#         sum of all time spent that year

RE_MATCH_PCRE=1
zmodload zsh/pcre
zmodload zsh/datetime

function test_day_against_datespec() {
        local day=$1
        for spec in $datespec ; do
                eval "case '$day' in
                    $spec)
                        return 1
                        ;;
                esac"
        done
        return 0
}

function calc_duration() {
        local time=$1

        if [[ $time =~ "^\s*([0-9.]+)h?\s*$" ]] ; then
                echo ${match[1]}
                return 0

        elif [[ $time =~ "^\s*([0-9.]+)m?\s*$" ]] ; then
                die "don't support duration expressed in minutes"

        elif [[ $time =~ "^\s*([0-9]{1,2}):([0-5][0-9])\s*-\s*([0-9]{1,2}):([0-5][0-9])\s*$" ]] ; then

                let "t1 = (${match[1]} * 60) + ${match[2]}"
                let "t2 = (${match[3]} * 60) + ${match[4]}"

                let "delta = $t2 - $t1"

                let -F "hrs = $delta / 60"
                let -F "min = $delta % 60"

                let "duration = $hrs + ( $min / 60 )"

                echo $duration
                return 0
        fi

        die "unrecognized time duration '$time'"
}

function update_entries() {
        local day=$1 time=$2 text=$3
        local dur=$(calc_duration $time)

        daytext[$day]="${daytext[$day]}$text"

        local -F tmp=${dayhours[$day]:-0}
        let "tmp = $tmp + $dur"
        dayhours[$day]=$tmp

        local month=${day%.*}

        local -F tmp=${monthhours[$month]:-0}
        let "tmp = $tmp + $dur"
        monthhours[$month]=$tmp

        local year=${day%.*}

        local -F tmp=${yearhours[$year]:-0}
        let "tmp = $tmp + $dur"
        yearhours[$year]=$tmp
}

function read_data_file() {
        local file="$1"
        local day=
        local matching=0
        while read line ; do
                #echo "# $line"
                if [[ "$line" =~ "^\s*(20[0-9]{2})[./-\s]*([01][0-9])[./-\s]*([0-3][0-9])\s*$" ]] ; then
                        day="${match[1]}.${match[2]}.${match[3]}"
                        test_day_against_datespec $day
                        matching=$?

                elif [[ "$line" =~ "^\s*([^=]+)\s*=\s*(.*)$" ]] ; then
                        [[ $matching -eq 1 ]] && update_entries $day ${match[1]} ${match[2]}

                fi
        done < "$file"
}

declare -g -A daytext
declare -g -A dayhours
declare -g -A monthhours
declare -g -A yearhours

for file in $* ; do
        [[ -r "$file" ]] || die "unable to read file '$file'"
        read_data_file "$file"
done

