#autoload -U
#vim: set ft=zsh 

local arg_type=
local arg_seq=
local output_file=

# parse local options
while [[ -n "$1" && "${1[1]}" = "-" ]] ; do
        opt=$1 ; shift
        case "$opt" in
            -h|--help)
                cli-generate-help 0
                ;;
            -o)
                output_file="$1"
                shift 2>/dev/null || die "generate -o requires an argument"
                ;;
            --output=*)
                output_file=${opt#--output=}
                ;;
            -t)
                arg_type=$1
                shift 2>/dev/null || die "generate -t requires an argument"
                ;;
            --type=*)
                arg_type=${opt#--type=}
                ;;
            -s)
                arg_seq=$1
                shift 2>/dev/null || die "generate -s requires an argument"
                ;;
            --sequence=*)
                arg_seq=${opt#--sequence=}
                ;;
            *)
            die "unknown config option '$opt'"
                ;;
        esac
done

read-config

# if one was not given, check for default generator
[[ -n "$arg_type" ]] || arg_type="${conf[default.generator]}"

# validate the type argument
[[ -n "$arg_type" ]] || die "you must specify an output type"
[[ -n "${conf[generator.$arg_type.template]}" && -n "${conf[generator.$arg_type.output]}" ]] \
|| die "Generator '$arg_type' is missconfigured.  A complete definition looks like this:

    [generator \"name\"]
        template = some-file
        output   = invoice-%Y%m%d-%#.out

You can fix this by editing your .clinvoice config file."

# make sure that template exists
local template_file="$CLI_DIR/${conf[generator.$arg_type.template]}"
[[ -f "$template_file" ]] || die "template files doesn't exist: $template_file"

# following that are date specs
typeset -g -a datespec

while [[ -n "$1" ]] ; do
        local opt=$1 ; shift
        local spec=$(normalize-datespec "$opt")
        [[ -z "$spec" ]] && die "invalid date spec '$opt'"
        datespec=( $datespec $spec )
done

# if there is no date spec, use today
[[ $#datespec = 0 ]] && datespec=( $(date '+%Y.%m.%d') )

# read in all the data
read-cli-files $CLI_DIR/*.cli

[[ ${#dayhours} = 0 ]] && die "no entries found"

# TODO: should be able to figure out the sequence given the existing files
typeset -g gen_seq=${arg_seq:-1}

# generate output file name based on intput data
[[ -z "$output_file" ]] && output_file=$(generate-name "${conf[generator.$arg_type.output]}")

# this is the escaping type
local escape="${conf[generator.$arg_type.escape]}"

# reset file before starting
: </dev/null >"$output_file"

# dump the data
generate-output "$template_file" "$output_file" "$escape"

echo >&2 "generated $output_file"

local build=${conf[generator.$arg_type.build]}
if [[ -n "$build" ]] ; then
        local cmd=${build/%%s/$output_file}
        echo >&2 "running: $cmd"
        eval "$cmd"
fi
