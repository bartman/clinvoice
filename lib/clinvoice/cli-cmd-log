#autoload -U
#vim: set ft=zsh 

typeset -g log_format=

init-color

arg_notes=false
arg_discounts=false

# parse local options
while [[ -n "$1" && "${1[1]}" = "-" ]] ; do
        opt=$1 ; shift
        case "$opt" in
            -h|--help)
                cli-log-help 0
                ;;
            -f)
                arg_format=$1
                shift 2>/dev/null || die "log -f requires an argument"
                ;;
            --format=*)
                arg_format=${opt#--format=}
                ;;
            -n|--notes)
                arg_notes=true
                ;;
            -d|--discounts)
                arg_discounts=true
                ;;
            *)
            die "unknown config option '$opt'"
                ;;
        esac
done

# validate the format argument
log_print=cli-log-format-full
[[ -n "$arg_format" ]] && log_print="cli-log-format-$arg_format"
( whence -w "$log_print" >/dev/null 2>&1 ) || die "unknown format '$arg_format'"

# following that are date specs
typeset -g -a datespec

while [[ -n "$1" ]] ; do
        local opt=$1 ; shift
        local spec=$(normalize-datespec "$opt")
        [[ -z "$spec" ]] && die "invalid date spec '$opt'"
        datespec=( $datespec $spec )
done

# if there is no date spec, use today
if [[ $#datespec = 0 ]] ; then
        case "$arg_format" in
                year)
                        datespec=( '20' )
                        ;;
                month)
                        datespec=( $(date '+%Y') )
                        ;;
                day)
                        datespec=( $(date '+%Y.%m') )
                        ;;
                *)
                        datespec=( $(date '+%Y.%m.%d') )
                        ;;
        esac
echo datespec=$datespec
fi

# read in all the data
read-cli-files $CLI_DIR/*.cli

# dump the data
$log_print

# dump discounts
if $arg_discounts && [[ ${#discount_ttl_amt} -gt 0 ]] ; then
        echo
        echo discounts
        for date in ${(o)${(k)discount_ttl_amt}} ; do
                amt=( ${(s::Q)discount_ttl_amt[$date]} )
                txt=( ${(s::Q)discount_ttl_txt[$date]} )
                for (( idx=1 ; idx <= ${#amt} ; idx++ )) ; do
                        printf "%10s - $date - %s\n" "${amt[$idx]}" "${txt[$idx]}"
                done
        done
fi

# dump notes
if $arg_notes && [[ ${#notes} -gt 0 ]] ; then
        echo
        echo notes
        for (( idx=1 ; idx <= ${#notes} ; idx++ )) ; do
                local txt="${notes[$idx]}"
                echo "  $txt"
        done
fi
